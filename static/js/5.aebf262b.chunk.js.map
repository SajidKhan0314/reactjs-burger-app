{"version":3,"sources":["components/Order/Order.module.css","containers/Orders/Orders.module.css","components/Order/Order.js","containers/Orders/Orders.js"],"names":["module","exports","order","props","ingredients","Object","keys","map","ingKey","style","textTransform","border","padding","margin","className","classes","Order","price","Orders","this","onFetchOrders","idToken","userId","orders","Spinner","error","isLoading","NoOrderTab","length","totalPrice","id","Component","connect","state","auth","dispatch","actions","withErrorHandler","axios"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,WAAa,4B,oBCA5DD,EAAOC,QAAU,CAAC,WAAa,6B,wGCqBhBC,EApBD,SAAAC,GACV,IAAIC,EAAcC,OAAOC,KAAKH,EAAMC,aAAaG,KAAI,SAAAC,GACjD,OAAO,uBACHC,MAAO,CACHC,cAAe,aACfC,OAAQ,iBACRC,QAAS,QACTC,OAAQ,SALT,UAOWL,EAPX,KAOqBL,EAAMC,YAAYI,GAPvC,MAOEA,MAGb,OACI,sBAAKM,UAAWC,IAAQC,MAAxB,UACI,+CAAkBZ,KAClB,wCAAU,0CAAaD,EAAMc,gB,kECPnCC,E,uKAEF,WACIC,KAAKhB,MAAMiB,cAAcD,KAAKhB,MAAMkB,QAASF,KAAKhB,MAAMmB,U,oBAG5D,WACI,IAAIC,EAAS,cAACC,EAAA,EAAD,IAkBb,OAjBIL,KAAKhB,MAAMsB,QACXF,EAAS,mBAAGT,UAAU,WAAb,SAAyBK,KAAKhB,MAAMsB,SAE5CN,KAAKhB,MAAMuB,WAAcP,KAAKhB,MAAMsB,QACrCF,EAAS,mBAAGT,UAAWC,IAAQY,WAAtB,4BACLR,KAAKhB,MAAMoB,OAAOK,OAAS,IAC3BL,EAASJ,KAAKhB,MAAMoB,OAAOhB,KACvB,SAAAL,GAAK,OACD,cAACc,EAAD,CAEIZ,YAAaF,EAAME,YACnBa,MAAOf,EAAM2B,YAFR3B,EAAM4B,SAQxBP,M,GAzBMQ,aA6CNC,uBAhBS,SAAAC,GACpB,MAAO,CACHV,OAAQU,EAAM/B,MAAMqB,OACpBG,UAAWO,EAAM/B,MAAMwB,UACvBD,MAAOQ,EAAM/B,MAAMuB,MACnBJ,QAASY,EAAMC,KAAKb,QACpBC,OAAQW,EAAMC,KAAKZ,WAIA,SAAAa,GACvB,MAAO,CACHf,cAAe,SAACC,EAASC,GAAV,OAAqBa,EAASC,IAAoBf,EAASC,QAInEU,CAA6CK,YAAiBnB,EAAQoB","file":"static/js/5.aebf262b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Order\":\"Order_Order__F2fsd\",\"Ingredient\":\"Order_Ingredient__1a3Ek\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"NoOrderTab\":\"Orders_NoOrderTab__34UPH\"};","import classes from './Order.module.css';\r\n\r\nconst order = props => {\r\n    let ingredients = Object.keys(props.ingredients).map(ingKey => {\r\n        return <span\r\n            style={{\r\n                textTransform: 'capitalize',\r\n                border: '1px solid gray',\r\n                padding: '0 3px',\r\n                margin: '0 3px'\r\n            }}\r\n            key={ingKey}>{ingKey} ({props.ingredients[ingKey]})</span>\r\n    });\r\n\r\n    return (\r\n        <div className={classes.Order}>\r\n            <p>Ingredirents: {ingredients}</p>\r\n            <p>Price: <strong>USD {props.price}</strong></p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default order;\r\n\r\n","import { Component } from 'react';\r\nimport Order from '../../components/Order/Order';\r\nimport Auxiliary from '../../hoc/Auxiliary/Auxiliary';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\r\nimport axios from '../../axios-orders';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../../store/actions/index';\r\nimport classes from './Orders.module.css';\r\n\r\nclass Orders extends Component {\r\n\r\n    componentDidMount() {\r\n        this.props.onFetchOrders(this.props.idToken, this.props.userId);\r\n    }\r\n\r\n    render() {\r\n        let orders = <Spinner />;\r\n        if (this.props.error) {\r\n            orders = <p className=\"ErrorTab\">{this.props.error}</p>;\r\n        }\r\n        if (!this.props.isLoading && !this.props.error) {\r\n            orders = <p className={classes.NoOrderTab}>No orders yet!</p>;\r\n            if (this.props.orders.length > 0) {\r\n                orders = this.props.orders.map(\r\n                    order =>\r\n                        <Order\r\n                            key={order.id}\r\n                            ingredients={order.ingredients}\r\n                            price={order.totalPrice}\r\n                        />\r\n                )\r\n            }\r\n        }\r\n\r\n        return orders;\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        orders: state.order.orders,\r\n        isLoading: state.order.isLoading,\r\n        error: state.order.error,\r\n        idToken: state.auth.idToken,\r\n        userId: state.auth.userId\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onFetchOrders: (idToken, userId) => dispatch(actions.fetchOrders(idToken, userId))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(Orders, axios));\r\n\r\n"],"sourceRoot":""}