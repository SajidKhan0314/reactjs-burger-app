{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","containers/Auth/Auth.module.css","containers/Auth/Auth.js","store/reducers/errors.js","store/actions/errorTypes.js"],"names":["input","props","inputElement","appliedClasses","classes","InputElement","shouldValidate","isTouched","valid","push","InvalidInput","inputType","className","join","type","dataType","placeholder","value","onChange","changed","options","map","option","display","Input","InputLabel","label","module","exports","Auth","state","authForm","email","configurations","validations","required","isEmail","validity","touched","password","minLength","formValidity","isSignUp","inputChangeHandler","event","updatedAuthForm","updateObject","target","validateInput","validateForm","setState","onAuthHandler","preventDefault","onAuth","switchAuthModeHandler","oldState","resetState","authFormInput","this","onClearMessages","formElementsArray","key","id","config","formInputs","message","error","success","isLoading","errorMessage","response","data","errorType","console","log","getErrorMessage","signUpSuccess","redirectPath","isBuildingBurger","redirect","isAuthenticated","to","form","onSubmit","Button","btnType","disabled","Spinner","Form","clicked","Component","connect","auth","idToken","burgerBuilder","buildingState","dispatch","actions","withErrorHandler","axios"],"mappings":"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","file":"static/js/4.cb8a4a88.chunk.js","sourcesContent":["import classes from './Input.module.css';\r\n\r\nconst input = props => {\r\n    let inputElement = null;\r\n\r\n    let appliedClasses = [classes.InputElement];\r\n\r\n    if (props.shouldValidate && props.isTouched && !props.valid) {\r\n        appliedClasses.push(classes.InvalidInput);\r\n    }\r\n\r\n    switch (props.inputType) {\r\n        case 'input':\r\n            inputElement = <input\r\n                className={appliedClasses.join(' ')}\r\n                type={props.dataType}\r\n                placeholder={props.placeholder}\r\n                value={props.value}\r\n                onChange={props.changed} />\r\n            break;\r\n        case 'textarea':\r\n            inputElement = <textarea\r\n                className={appliedClasses.join(' ')}\r\n                type={props.dataType}\r\n                placeholder={props.placeholder}\r\n                value={props.value}\r\n                onChange={props.changed} />\r\n            break;\r\n        case 'select':\r\n            inputElement = (\r\n                <select className={appliedClasses.join(' ')} value={props.value} onChange={props.changed} >\r\n                    {\r\n                        props.options.map(option => {\r\n                            return (\r\n                                <option key={option.value} value={option.value}>\r\n                                    {option.display}\r\n                                </option>\r\n                            );\r\n                        }\r\n                        )\r\n                    }\r\n                </select>\r\n            );\r\n            break;\r\n        default:\r\n            inputElement = <input\r\n                className={appliedClasses.join(' ')}\r\n                type={props.dataType}\r\n                placeholder={props.placeholder}\r\n                value={props.value}\r\n                onChange={props.changed} />\r\n            break;\r\n    }\r\n\r\n    return (\r\n        <div className={classes.Input}>\r\n            <p className={classes.InputLabel}>{props.label}</p>\r\n            {inputElement}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default input;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__31Juv\",\"InputElement\":\"Input_InputElement__cbdRJ\",\"InvalidInput\":\"Input_InvalidInput__3gTQ0\",\"InputLabel\":\"Input_InputLabel__2ICCP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Form\":\"Auth_Form__3KeRx\"};","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\r\nimport axios from 'axios';\r\nimport Input from '../../components/UI/Input/Input';\r\nimport Button from '../../components/UI/Button/Button';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport { getErrorMessage } from '../../store/reducers/errors';\r\nimport classes from './Auth.module.css';\r\nimport * as actions from '../../store/actions/index';\r\nimport { updateObject, validateInput, validateForm } from '../../shared/utility';\r\n\r\n\r\nclass Auth extends Component {\r\n    state = {\r\n        authForm: {\r\n            email: {\r\n                value: '',\r\n                configurations: {\r\n                    inputType: 'input',\r\n                    dataType: 'email',\r\n                    label: 'Email Address',\r\n                    placeholder: 'Email',\r\n                },\r\n                shouldValidate: true,\r\n                validations: {\r\n                    required: true,\r\n                    isEmail: true\r\n                },\r\n                validity: false,\r\n                touched: false\r\n            },\r\n            password: {\r\n                value: '',\r\n                configurations: {\r\n                    inputType: 'input',\r\n                    dataType: 'password',\r\n                    label: 'Password',\r\n                    placeholder: 'Password',\r\n                },\r\n                shouldValidate: true,\r\n                validations: {\r\n                    required: true,\r\n                    minLength: 6,\r\n                },\r\n                validity: false,\r\n                touched: false\r\n            }\r\n        },\r\n        formValidity: false,\r\n        isSignUp: true\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.onClearMessages();\r\n    }\r\n\r\n    inputChangeHandler = (event, inputType) => {\r\n        const updatedAuthForm = updateObject({ ...this.state.authForm }, {\r\n            [inputType]: updateObject({ ...this.state.authForm[inputType] }, {\r\n                value: event.target.value,\r\n                validity: validateInput(\r\n                    event.target.value,\r\n                    this.state.authForm[inputType].validations,\r\n                    this.state.authForm[inputType].shouldValidate\r\n                ),\r\n                touched: true\r\n            })\r\n        });\r\n        const formValidity = validateForm(updatedAuthForm);\r\n        this.setState({ formValidity: formValidity });\r\n        this.setState({ authForm: updatedAuthForm });\r\n    }\r\n\r\n    onAuthHandler = (event) => {\r\n        event.preventDefault();\r\n        this.props.onAuth(this.state.authForm.email.value, this.state.authForm.password.value, this.state.isSignUp);\r\n    }\r\n\r\n    switchAuthModeHandler = () => {\r\n        this.setState(oldState => {\r\n            return { isSignUp: !this.state.isSignUp }\r\n        });\r\n    }\r\n\r\n    resetState = () => {\r\n        const updatedAuthForm = { ...this.state.authForm };\r\n        for (let authFormInput in updatedAuthForm) {\r\n            updatedAuthForm[authFormInput] = {\r\n                ...updatedAuthForm[authFormInput],\r\n                value: ''\r\n            }\r\n        }\r\n        this.setState({ authForm: updatedAuthForm });\r\n    }\r\n\r\n    render() {\r\n        let formElementsArray = [];\r\n        for (let key in this.state.authForm) {\r\n            formElementsArray.push({\r\n                id: key,\r\n                config: this.state.authForm[key],\r\n            })\r\n        }\r\n\r\n        let formInputs = formElementsArray.map(\r\n            input => {\r\n                return <Input\r\n                    key={input.id}\r\n                    value={input.config.value}\r\n                    changed={(event) => this.inputChangeHandler(event, input.id)}\r\n                    {...input.config.configurations}\r\n                    valid={input.config.validity}\r\n                    shouldValidate={input.config.shouldValidate}\r\n                    isTouched={input.config.touched}\r\n                />\r\n            }\r\n        );\r\n\r\n        let message = null;\r\n\r\n        if ((this.props.error || this.props.success) && !this.props.isLoading) {\r\n            if (this.props.error) {\r\n                const errorMessage = this.props.error.response.data.error.message ?\r\n                    getErrorMessage(this.props.error.response.data.error.message) :\r\n                    this.props.error.message;\r\n                message = <p className=\"ErrorTab\">{errorMessage}</p>;\r\n            }\r\n            if (this.props.success) {\r\n                message = <p className=\"SuccessTab\">{this.props.signUpSuccess}</p>;\r\n            }\r\n        }\r\n\r\n        const redirectPath = this.props.isBuildingBurger ? \"/checkout\" : \"/\";\r\n\r\n        const redirect = this.props.isAuthenticated ? <Redirect to={redirectPath} /> : null;\r\n\r\n        let form = (\r\n            <form onSubmit={this.onAuthHandler}>\r\n                <h3>{this.state.isSignUp ? 'Sign Up' : 'Sing In'}</h3>\r\n                {formInputs}\r\n                <Button btnType=\"Success\" disabled={!this.state.formValidity}>\r\n                    {this.state.isSignUp ? 'Sign Up' : 'Sing In'}\r\n                </Button>\r\n            </form>\r\n        );\r\n\r\n        if (this.props.isLoading) {\r\n            form = <Spinner />;\r\n        }\r\n\r\n        return (\r\n            <div className={classes.Form}>\r\n                {redirect}\r\n                {form}\r\n                <Button btnType=\"Alt\" clicked={this.switchAuthModeHandler}>Switch To {this.state.isSignUp ? 'Sign In' : 'Sing Up'}\r\n                </Button>\r\n                {message}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isLoading: state.auth.isLoading,\r\n        error: state.auth.error,\r\n        signUpSuccess: state.auth.signUpSuccess,\r\n        isAuthenticated: state.auth.idToken != null,\r\n        isBuildingBurger: state.burgerBuilder.buildingState\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onAuth: (email, password, isSignUp) => dispatch(actions.auth(email, password, isSignUp)),\r\n        onClearMessages: () => dispatch(actions.clearMessages())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(Auth, axios));\r\n","import * as errorTypes from '../actions/errorTypes';\r\n\r\nexport const getErrorMessage = (errorType) => {\r\n    console.log(errorType);\r\n    switch (errorType) {\r\n        case errorTypes.EMAIL_EXISTS: return \"The email address is already in use by another account.\";\r\n        case errorTypes.OPERATION_NOT_ALLOWED: return \"Password sign-in is disabled for this project.\";\r\n        case errorTypes.TOO_MANY_ATTEMPTS_TRY_LATER: return \"We have blocked all requests from this device due to unusual activity. Try again later.\";\r\n        case errorTypes.EMAIL_NOT_FOUND: return \"There is no user record corresponding to this identifier. The user may have been deleted.\";\r\n        case errorTypes.INVALID_PASSWORD: return \"The password is invalid or the user does not have a password.\";\r\n        case errorTypes.USER_DISABLED: return \"The user account has been disabled by an administrator.\";\r\n        default: return errorType;\r\n    }\r\n}\r\n","export const EMAIL_EXISTS = \"EMAIL_EXISTS\";\r\nexport const OPERATION_NOT_ALLOWED = \"OPERATION_NOT_ALLOWED\";\r\nexport const TOO_MANY_ATTEMPTS_TRY_LATER = \"TOO_MANY_ATTEMPTS_TRY_LATER\";\r\nexport const EMAIL_NOT_FOUND = \"EMAIL_NOT_FOUND\";\r\nexport const INVALID_PASSWORD = \"INVALID_PASSWORD\";\r\nexport const USER_DISABLED = \"USER_DISABLED\";\r\nexport const NETWORK_ERROR = \"Network Error\";\r\n"],"sourceRoot":""}