{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","components/Order/CheckoutSummary/CheckoutSummary.module.css","containers/Checkout/ContactOrder/ContactOrder.module.css","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactOrder/ContactOrder.js","containers/Checkout/Checkout.js"],"names":["input","props","inputElement","appliedClasses","classes","InputElement","shouldValidate","isTouched","valid","push","InvalidInput","inputType","className","join","type","dataType","placeholder","value","onChange","changed","options","map","option","display","Input","InputLabel","label","module","exports","CheckoutSummary","Burger","ingredients","totalPrice","toFixed","Button","btnType","clicked","orderCancelled","orderContinued","ContactOrder","state","orderForm","name","configurations","validations","required","minLength","validity","touched","email","isEmail","country","city","zip","maxLength","deliveryMethod","formValidity","completeOrder","event","preventDefault","orderFormData","field","order","orderData","price","userId","onCompleteOrder","idToken","inputChangeHandler","updatedOrderForm","updateObject","target","validateInput","validateForm","setState","formElementsArray","key","this","id","config","formInputs","inputKey","form","Form","disabled","isLoading","Spinner","error","Auxiliary","Component","connect","burgerBuilder","auth","dispatch","orderInfor","purchaseBurger","withRouter","withErrorHandler","axios","Checkout","cancelOrderHandler","history","replace","continueOrderHandler","match","url","checkoutSummary","to","purchasedRedirect","purchased","path","exact","component"],"mappings":"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","file":"static/js/3.c552a1ac.chunk.js","sourcesContent":["import classes from './Input.module.css';\r\n\r\nconst input = props => {\r\n    let inputElement = null;\r\n\r\n    let appliedClasses = [classes.InputElement];\r\n\r\n    if (props.shouldValidate && props.isTouched && !props.valid) {\r\n        appliedClasses.push(classes.InvalidInput);\r\n    }\r\n\r\n    switch (props.inputType) {\r\n        case 'input':\r\n            inputElement = <input\r\n                className={appliedClasses.join(' ')}\r\n                type={props.dataType}\r\n                placeholder={props.placeholder}\r\n                value={props.value}\r\n                onChange={props.changed} />\r\n            break;\r\n        case 'textarea':\r\n            inputElement = <textarea\r\n                className={appliedClasses.join(' ')}\r\n                type={props.dataType}\r\n                placeholder={props.placeholder}\r\n                value={props.value}\r\n                onChange={props.changed} />\r\n            break;\r\n        case 'select':\r\n            inputElement = (\r\n                <select className={appliedClasses.join(' ')} value={props.value} onChange={props.changed} >\r\n                    {\r\n                        props.options.map(option => {\r\n                            return (\r\n                                <option key={option.value} value={option.value}>\r\n                                    {option.display}\r\n                                </option>\r\n                            );\r\n                        }\r\n                        )\r\n                    }\r\n                </select>\r\n            );\r\n            break;\r\n        default:\r\n            inputElement = <input\r\n                className={appliedClasses.join(' ')}\r\n                type={props.dataType}\r\n                placeholder={props.placeholder}\r\n                value={props.value}\r\n                onChange={props.changed} />\r\n            break;\r\n    }\r\n\r\n    return (\r\n        <div className={classes.Input}>\r\n            <p className={classes.InputLabel}>{props.label}</p>\r\n            {inputElement}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default input;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__31Juv\",\"InputElement\":\"Input_InputElement__cbdRJ\",\"InvalidInput\":\"Input_InvalidInput__3gTQ0\",\"InputLabel\":\"Input_InputLabel__2ICCP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__2T2uz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Form\":\"ContactOrder_Form__3Qb-i\"};","import Burger from '../../Burger/Burger';\r\nimport Button from '../../UI/Button/Button';\r\nimport classes from './CheckoutSummary.module.css';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst CheckoutSummary = (props) => {\r\n    return (\r\n        <div className={classes.CheckoutSummary}>\r\n            <h1>I hope it tastes well!</h1>\r\n            <Burger ingredients={props.ingredients} />\r\n            <p>Total price: <strong>USD {props.totalPrice.toFixed(2)}</strong></p>\r\n            <Button btnType=\"Danger\" clicked={props.orderCancelled}>Cancel</Button>\r\n            <Button btnType=\"Success\" clicked={props.orderContinued}>Continue</Button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CheckoutSummary;\r\n","import { Component } from 'react';\r\nimport Button from '../../../components/UI/Button/Button';\r\nimport Spinner from '../../../components/UI/Spinner/Spinner';\r\nimport Input from '../../../components/UI/Input/Input';\r\nimport axios from '../../../axios-orders';\r\nimport Auxiliary from '../../../hoc/Auxiliary/Auxiliary';\r\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\r\nimport classes from './ContactOrder.module.css';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { purchaseBurger } from '../../../store/actions/index';\r\nimport { updateObject, validateInput, validateForm } from '../../../shared/utility';\r\n\r\nclass ContactOrder extends Component {\r\n\r\n    state = {\r\n        orderForm: {\r\n            name: {\r\n                value: '',\r\n                configurations: {\r\n                    inputType: 'input',\r\n                    dataType: 'text',\r\n                    label: 'Full Name',\r\n                    placeholder: 'Name',\r\n                },\r\n                validations: {\r\n                    required: true,\r\n                    minLength: 3,\r\n                },\r\n                shouldValidate: true,\r\n                validity: false,\r\n                touched: false\r\n            },\r\n            email: {\r\n                value: '',\r\n                configurations: {\r\n                    inputType: 'input',\r\n                    dataType: 'email',\r\n                    label: 'Email',\r\n                    placeholder: 'Email',\r\n                },\r\n                validations: {\r\n                    required: true,\r\n                    isEmail: true\r\n                },\r\n                shouldValidate: true,\r\n                validity: false,\r\n                touched: false\r\n            },\r\n            country: {\r\n                value: '',\r\n                configurations: {\r\n                    inputType: 'input',\r\n                    dataType: 'text',\r\n                    label: 'Country',\r\n                    placeholder: 'Country',\r\n                },\r\n                validations: {\r\n                    required: true,\r\n                    minLength: 3\r\n                },\r\n                shouldValidate: true,\r\n                validity: false,\r\n                touched: false\r\n            },\r\n            city: {\r\n                value: '',\r\n                configurations: {\r\n                    inputType: 'input',\r\n                    dataType: 'text',\r\n                    label: 'City',\r\n                    placeholder: 'City',\r\n                },\r\n                validations: {\r\n                    required: true,\r\n                    minLength: 3\r\n                },\r\n                shouldValidate: true,\r\n                validity: false,\r\n                touched: false\r\n            },\r\n            zip: {\r\n                value: '',\r\n                configurations: {\r\n                    inputType: 'input',\r\n                    dataType: 'text',\r\n                    label: 'Zip Code',\r\n                    placeholder: 'Zip Code',\r\n                },\r\n                validations: {\r\n                    required: true,\r\n                    minLength: 3,\r\n                    maxLength: 8\r\n                },\r\n                shouldValidate: true,\r\n                validity: false,\r\n                touched: false\r\n            },\r\n            deliveryMethod: {\r\n                value: 'fastest',\r\n                configurations: {\r\n                    inputType: 'select',\r\n                    label: 'Delivery Method',\r\n                    options: [\r\n                        { value: 'fastest', display: 'Fastest' },\r\n                        { value: 'cheapest', display: 'Cheapest' },\r\n                    ]\r\n                },\r\n                shouldValidate: false,\r\n                validity: true\r\n            },\r\n        },\r\n        formValidity: false,\r\n    }\r\n\r\n    completeOrder = (event) => {\r\n        event.preventDefault();\r\n\r\n        let orderFormData = {};\r\n        for (let field in this.state.orderForm) {\r\n            orderFormData[field] = this.state.orderForm[field].value;\r\n        }\r\n\r\n        const order = {\r\n            orderData: orderFormData,\r\n            ingredients: this.props.ingredients,\r\n            price: this.props.totalPrice.toFixed(2),\r\n            userId: this.props.userId\r\n        };\r\n\r\n        this.props.onCompleteOrder(order, this.props.idToken);\r\n    }\r\n\r\n    inputChangeHandler = (event, inputType) => {\r\n        const updatedOrderForm = updateObject({ ...this.state.orderForm },\r\n            {\r\n                [inputType]: updateObject({ ...this.state.orderForm[inputType] }, {\r\n                    value: event.target.value,\r\n                    validity: validateInput(\r\n                        event.target.value,\r\n                        this.state.orderForm[inputType].validations,\r\n                        this.state.orderForm[inputType].shouldValidate\r\n                    ),\r\n                    touched: true\r\n                }),\r\n            }\r\n        );\r\n\r\n        const formValidity = validateForm(updatedOrderForm);\r\n        this.setState({ formValidity: formValidity });\r\n        this.setState({ orderForm: updatedOrderForm });\r\n    }\r\n\r\n    render() {\r\n        let formElementsArray = [];\r\n\r\n        for (let key in this.state.orderForm) {\r\n            formElementsArray.push(\r\n                {\r\n                    id: key,\r\n                    config: this.state.orderForm[key],\r\n                }\r\n            );\r\n        }\r\n\r\n        const formInputs = formElementsArray.map(\r\n            inputKey => {\r\n                return <Input\r\n                    key={inputKey.id}\r\n                    value={inputKey.config.value}\r\n                    changed={(event) => this.inputChangeHandler(event, inputKey.id)}\r\n                    {...inputKey.config.configurations}\r\n                    valid={inputKey.config.validity}\r\n                    shouldValidate={inputKey.config.shouldValidate}\r\n                    isTouched={inputKey.config.touched}\r\n                />\r\n            }\r\n        );\r\n\r\n        let form = (\r\n            <form className={classes.Form}>\r\n                <h1>Order form</h1>\r\n                {formInputs}\r\n                <Button btnType=\"Success\" clicked={this.completeOrder} disabled={!this.state.formValidity}>Order</Button>\r\n            </form>\r\n        );\r\n\r\n        if (this.props.isLoading) {\r\n            form = <Spinner />;\r\n        }\r\n\r\n        let error = this.props.error ? <p className=\"ErrorTab\">{this.props.error}</p> : null;\r\n\r\n        return (\r\n            <Auxiliary>\r\n                {form}\r\n                {error}\r\n            </Auxiliary>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ingredients: state.burgerBuilder.ingredients,\r\n        totalPrice: state.burgerBuilder.totalPrice,\r\n        isLoading: state.order.isLoading,\r\n        error: state.order.error,\r\n        userId: state.auth.userId,\r\n        idToken: state.auth.idToken\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onCompleteOrder: (orderInfor, idToken) => dispatch(purchaseBurger(orderInfor, idToken)),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(withErrorHandler(ContactOrder, axios)));\r\n","import { Component } from 'react';\r\nimport { Redirect, Route } from 'react-router-dom';\r\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\r\nimport ContactOrder from './ContactOrder/ContactOrder';\r\nimport Auxiliary from '../../hoc/Auxiliary/Auxiliary';\r\nimport { connect } from 'react-redux';\r\nimport { initPurchase } from '../../store/actions/index';\r\n\r\nclass Checkout extends Component {\r\n    cancelOrderHandler = () => {\r\n        this.props.history.replace('/');\r\n    }\r\n\r\n    continueOrderHandler = () => {\r\n        this.props.history.push(this.props.match.url + '/contact-order');\r\n    }\r\n\r\n    render() {\r\n        let checkoutSummary = <Redirect to=\"/\" />;\r\n        if (this.props.ingredients) {\r\n            const purchasedRedirect = this.props.purchased ? <Redirect to=\"/\" /> : null;\r\n            checkoutSummary = (\r\n                <Auxiliary>\r\n                    {purchasedRedirect}\r\n                    <CheckoutSummary\r\n                        ingredients={this.props.ingredients}\r\n                        totalPrice={this.props.totalPrice}\r\n                        orderCancelled={this.cancelOrderHandler}\r\n                        orderContinued={this.continueOrderHandler} />\r\n                    <Route path=\"/checkout/contact-order\" exact component={ContactOrder} />\r\n                </Auxiliary>\r\n            )\r\n        };\r\n        return checkoutSummary;\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ingredients: state.burgerBuilder.ingredients,\r\n        totalPrice: state.burgerBuilder.totalPrice,\r\n        purchased: state.order.purchased\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Checkout);\r\n"],"sourceRoot":""}